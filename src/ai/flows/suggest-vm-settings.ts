// This file is generated by Firebase Genkit.
'use server';
/**
 * @fileOverview An AI agent that suggests optimal VM settings based on the applications a user intends to run.
 *
 * - suggestVmSettings - A function that handles the suggestion of VM settings.
 * - SuggestVmSettingsInput - The input type for the suggestVmSettings function.
 * - SuggestVmSettingsOutput - The return type for the suggestVmSettings function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestVmSettingsInputSchema = z.object({
  applications: z
    .string()
    .describe(
      'A comma separated list of applications the user intends to run on the VM.'
    ),
});
export type SuggestVmSettingsInput = z.infer<typeof SuggestVmSettingsInputSchema>;

const SuggestVmSettingsOutputSchema = z.object({
  cpu: z.number().describe('The suggested number of CPU cores for the VM.'),
  ram: z.number().describe('The suggested amount of RAM in GB for the VM.'),
  notes: z
    .string()
    .optional()
    .describe('Any additional notes or considerations for the VM settings.'),
});
export type SuggestVmSettingsOutput = z.infer<typeof SuggestVmSettingsOutputSchema>;

export async function suggestVmSettings(input: SuggestVmSettingsInput): Promise<SuggestVmSettingsOutput> {
  return suggestVmSettingsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestVmSettingsPrompt',
  input: {schema: SuggestVmSettingsInputSchema},
  output: {schema: SuggestVmSettingsOutputSchema},
  prompt: `You are an expert in virtual machine configuration and resource allocation.

  Based on the applications the user intends to run, suggest optimal VM settings, including the number of CPU cores and the amount of RAM in GB.
  Avoid over-provisioning to save server costs. Also provide any additional notes or considerations if necessary.

  Applications: {{{applications}}}`,
});

const suggestVmSettingsFlow = ai.defineFlow(
  {
    name: 'suggestVmSettingsFlow',
    inputSchema: SuggestVmSettingsInputSchema,
    outputSchema: SuggestVmSettingsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
