
// This file is generated by Firebase Genkit.
'use server';
/**
 * @fileOverview An AI agent that suggests optimal container resource settings based on the applications a user intends to run.
 *
 * - suggestContainerSettings - A function that handles the suggestion of container settings.
 * - SuggestContainerSettingsInput - The input type for the suggestContainerSettings function.
 * - SuggestContainerSettingsOutput - The return type for the suggestContainerSettings function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestContainerSettingsInputSchema = z.object({
  applications: z
    .string()
    .describe(
      'A comma separated list of applications the user intends to run in the container.'
    ),
});
export type SuggestContainerSettingsInput = z.infer<typeof SuggestContainerSettingsInputSchema>;

const SuggestContainerSettingsOutputSchema = z.object({
  cpu: z.number().describe('The suggested number of CPU cores for the container (can be fractional).'),
  ram: z.number().describe('The suggested amount of RAM in GB for the container.'),
  notes: z
    .string()
    .optional()
    .describe('Any additional notes or considerations for the container settings (e.g., base image suggestions, storage needs).'),
});
export type SuggestContainerSettingsOutput = z.infer<typeof SuggestContainerSettingsOutputSchema>;

export async function suggestContainerSettings(input: SuggestContainerSettingsInput): Promise<SuggestContainerSettingsOutput> {
  return suggestContainerSettingsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestContainerSettingsPrompt',
  input: {schema: SuggestContainerSettingsInputSchema},
  output: {schema: SuggestContainerSettingsOutputSchema},
  prompt: `You are an expert in container resource allocation and configuration for cloud environments.

  Based on the applications the user intends to run, suggest optimal container resource settings, including the number of CPU cores (can be fractional, e.g., 0.5 for 500m) and the amount of RAM in GB.
  Optimize for cost-effectiveness while ensuring performance. Also provide any additional notes or considerations if necessary, such as base image recommendations or persistent storage needs.

  Applications: {{{applications}}}`,
});

const suggestContainerSettingsFlow = ai.defineFlow(
  {
    name: 'suggestContainerSettingsFlow',
    inputSchema: SuggestContainerSettingsInputSchema,
    outputSchema: SuggestContainerSettingsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
